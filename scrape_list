#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

declare __dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly __dir

declare __file
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
readonly __file

declare __base
__base="$(basename "${__file}" .sh)"
readonly __base

# shellcheck source=./lib/env.sh
source "$__dir"/lib/env.sh

# shellcheck source=./lib/log.sh
source "$__dir"/lib/log.sh

# shellcheck source=./lib/exit_codes.sh
source "$__dir"/lib/exit_codes.sh

declare force_overwrite=false
declare output_file=""

usage() {
  cat << MSG 
Gets the current list of notable people who have died from COVID-19 from Wikipedia.

Usage:
  ${__base} [options]

OPTIONS
  -o, --output <FILE>
      Specifies the file to write the retrieved HTML to. If this is not provided, writes to STDOUT instead. If the file exists, you will be asked to confirm overwriting it.
  -f, --force
      Overwrites the output file without prompting.
  -h, --help
      Prints this message.
MSG
}

process_args() {
  local output_flag=false
  while [[ $# -gt 0 ]]; do
	  if [[ $1 =~ ^- ]]; then
		  # Convert combined short options into multiples short options (e.g. '-qb' to '-q -b')
		  if [[ $1 =~ ^-[a-z]{2,} ]]; then
			  param=$1
			  shift
			  set -- "${param:0:2}" "-${param:2}" "$@"
			  unset param
		  fi
		  case $1 in
			  -h | --help)  
                usage
                exit 0  
              ;;
			  -f | --force) 
                force_overwrite=true
              ;;
			  -o | --output)
			    output_flag=true
              ;;
			  *)
                err $EX_UNKNOWN_OPT "Unknown option '$1'"
              ;;
		  esac
		  shift
	  else
	    if [[ "$output_flag" == true ]]; then
          output_file="$1"
        else
          err $EX_UNKNOWN_OPT "Unknown option '$1'"
        fi
        break
	  fi
  done
  
  # some sanity checks
  if [[ -z "$output_file" ]]; then
    if [[ "$output_flag" == true ]]; then
      err $EX_MISSING_OUTPUT_FILE "Output file option given but no file specified."
    fi
    
    if [[ "$force_overwrite" == true ]]; then
      err $EX_FORCE_NO_OUTPUT "Force option given but no output file specified."
    fi
  fi
}

check_overwrite() {
  if [[ -e "$output_file" ]]; then
    if [[ -d "$output_file" ]]; then
      err $EX_OUTPUT_FILE_DIRECTORY "Directory was specified as output file."
    fi
    
    if [[ "$force_overwrite" != true ]]; then
      read -r -n 1 -p "File already exists. Overwrite? (y/n)? " res
      case ${res:0:1} in
        y|Y) ;; # no op; we fail if it's not yes.
        *)
          printf "\n"
          err $EX_OUTPUT_FILE_EXISTS_NO_OW "$output_file already exists. Use the -f flag to force overwriting an existing file."
        ;;
      esac
    fi
  fi
}

verify_env() {
  exists "curl" || err $EX_MISSING_CMD "Please install curl before executing."
}

scrape() {
  curl "https://en.m.wikipedia.org/wiki/List_of_deaths_from_the_2019%E2%80%9320_coronavirus_pandemic"
}

main() {
  verify_env
  
  process_args "$@"

  check_overwrite
  
  if [[ -z "$output_file" ]]; then
    scrape
  else
    scrape > "$output_file"
  fi
}

main "$@"